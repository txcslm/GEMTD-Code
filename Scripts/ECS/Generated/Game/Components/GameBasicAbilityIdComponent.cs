//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherBasicAbilityId;

    public static Entitas.IMatcher<GameEntity> BasicAbilityId {
        get {
            if (_matcherBasicAbilityId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.BasicAbilityId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherBasicAbilityId = matcher;
            }

            return _matcherBasicAbilityId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Battle.BasicAbilityIdComponent basicAbilityId { get { return (Game.Battle.BasicAbilityIdComponent)GetComponent(GameComponentsLookup.BasicAbilityId); } }
    public int BasicAbilityId { get { return basicAbilityId.Value; } }
    public bool hasBasicAbilityId { get { return HasComponent(GameComponentsLookup.BasicAbilityId); } }

    public GameEntity AddBasicAbilityId(int newValue) {
        var index = GameComponentsLookup.BasicAbilityId;
        var component = (Game.Battle.BasicAbilityIdComponent)CreateComponent(index, typeof(Game.Battle.BasicAbilityIdComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceBasicAbilityId(int newValue) {
        var index = GameComponentsLookup.BasicAbilityId;
        var component = (Game.Battle.BasicAbilityIdComponent)CreateComponent(index, typeof(Game.Battle.BasicAbilityIdComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveBasicAbilityId() {
        RemoveComponent(GameComponentsLookup.BasicAbilityId);
        return this;
    }
}
