//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherEnemySpawned;

    public static Entitas.IMatcher<GameEntity> EnemySpawned {
        get {
            if (_matcherEnemySpawned == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.EnemySpawned);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherEnemySpawned = matcher;
            }

            return _matcherEnemySpawned;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.EnemySpawnedComponent enemySpawned { get { return (Game.EnemySpawnedComponent)GetComponent(GameComponentsLookup.EnemySpawned); } }
    public int EnemySpawned { get { return enemySpawned.Value; } }
    public bool hasEnemySpawned { get { return HasComponent(GameComponentsLookup.EnemySpawned); } }

    public GameEntity AddEnemySpawned(int newValue) {
        var index = GameComponentsLookup.EnemySpawned;
        var component = (Game.EnemySpawnedComponent)CreateComponent(index, typeof(Game.EnemySpawnedComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceEnemySpawned(int newValue) {
        var index = GameComponentsLookup.EnemySpawned;
        var component = (Game.EnemySpawnedComponent)CreateComponent(index, typeof(Game.EnemySpawnedComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveEnemySpawned() {
        RemoveComponent(GameComponentsLookup.EnemySpawned);
        return this;
    }
}
