//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTotalGameTime;

    public static Entitas.IMatcher<GameEntity> TotalGameTime {
        get {
            if (_matcherTotalGameTime == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TotalGameTime);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTotalGameTime = matcher;
            }

            return _matcherTotalGameTime;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.GameMainFeature.TotalGameTimeComponent totalGameTime { get { return (Game.GameMainFeature.TotalGameTimeComponent)GetComponent(GameComponentsLookup.TotalGameTime); } }
    public float TotalGameTime { get { return totalGameTime.Value; } }
    public bool hasTotalGameTime { get { return HasComponent(GameComponentsLookup.TotalGameTime); } }

    public GameEntity AddTotalGameTime(float newValue) {
        var index = GameComponentsLookup.TotalGameTime;
        var component = (Game.GameMainFeature.TotalGameTimeComponent)CreateComponent(index, typeof(Game.GameMainFeature.TotalGameTimeComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceTotalGameTime(float newValue) {
        var index = GameComponentsLookup.TotalGameTime;
        var component = (Game.GameMainFeature.TotalGameTimeComponent)CreateComponent(index, typeof(Game.GameMainFeature.TotalGameTimeComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveTotalGameTime() {
        RemoveComponent(GameComponentsLookup.TotalGameTime);
        return this;
    }
}
