//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCurrentHealthPoints;

    public static Entitas.IMatcher<GameEntity> CurrentHealthPoints {
        get {
            if (_matcherCurrentHealthPoints == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CurrentHealthPoints);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCurrentHealthPoints = matcher;
            }

            return _matcherCurrentHealthPoints;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Lifetime.CurrentHealthPointsComponent currentHealthPoints { get { return (Game.Lifetime.CurrentHealthPointsComponent)GetComponent(GameComponentsLookup.CurrentHealthPoints); } }
    public float CurrentHealthPoints { get { return currentHealthPoints.Value; } }
    public bool hasCurrentHealthPoints { get { return HasComponent(GameComponentsLookup.CurrentHealthPoints); } }

    public GameEntity AddCurrentHealthPoints(float newValue) {
        var index = GameComponentsLookup.CurrentHealthPoints;
        var component = (Game.Lifetime.CurrentHealthPointsComponent)CreateComponent(index, typeof(Game.Lifetime.CurrentHealthPointsComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCurrentHealthPoints(float newValue) {
        var index = GameComponentsLookup.CurrentHealthPoints;
        var component = (Game.Lifetime.CurrentHealthPointsComponent)CreateComponent(index, typeof(Game.Lifetime.CurrentHealthPointsComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCurrentHealthPoints() {
        RemoveComponent(GameComponentsLookup.CurrentHealthPoints);
        return this;
    }
}
