//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTargetPointWorldPosition;

    public static Entitas.IMatcher<GameEntity> TargetPointWorldPosition {
        get {
            if (_matcherTargetPointWorldPosition == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TargetPointWorldPosition);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTargetPointWorldPosition = matcher;
            }

            return _matcherTargetPointWorldPosition;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Enemies.TargetPointWorldPositionComponent targetPointWorldPosition { get { return (Game.Enemies.TargetPointWorldPositionComponent)GetComponent(GameComponentsLookup.TargetPointWorldPosition); } }
    public UnityEngine.Vector3 TargetPointWorldPosition { get { return targetPointWorldPosition.Value; } }
    public bool hasTargetPointWorldPosition { get { return HasComponent(GameComponentsLookup.TargetPointWorldPosition); } }

    public GameEntity AddTargetPointWorldPosition(UnityEngine.Vector3 newValue) {
        var index = GameComponentsLookup.TargetPointWorldPosition;
        var component = (Game.Enemies.TargetPointWorldPositionComponent)CreateComponent(index, typeof(Game.Enemies.TargetPointWorldPositionComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceTargetPointWorldPosition(UnityEngine.Vector3 newValue) {
        var index = GameComponentsLookup.TargetPointWorldPosition;
        var component = (Game.Enemies.TargetPointWorldPositionComponent)CreateComponent(index, typeof(Game.Enemies.TargetPointWorldPositionComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveTargetPointWorldPosition() {
        RemoveComponent(GameComponentsLookup.TargetPointWorldPosition);
        return this;
    }
}
