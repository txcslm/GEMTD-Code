//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherGameLoopStateEnum;

    public static Entitas.IMatcher<GameEntity> GameLoopStateEnum {
        get {
            if (_matcherGameLoopStateEnum == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.GameLoopStateEnum);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherGameLoopStateEnum = matcher;
            }

            return _matcherGameLoopStateEnum;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.GameLoopStateEnumComponent gameLoopStateEnum { get { return (Game.GameLoopStateEnumComponent)GetComponent(GameComponentsLookup.GameLoopStateEnum); } }
    public Game.GameLoopStateEnum GameLoopStateEnum { get { return gameLoopStateEnum.Value; } }
    public bool hasGameLoopStateEnum { get { return HasComponent(GameComponentsLookup.GameLoopStateEnum); } }

    public GameEntity AddGameLoopStateEnum(Game.GameLoopStateEnum newValue) {
        var index = GameComponentsLookup.GameLoopStateEnum;
        var component = (Game.GameLoopStateEnumComponent)CreateComponent(index, typeof(Game.GameLoopStateEnumComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceGameLoopStateEnum(Game.GameLoopStateEnum newValue) {
        var index = GameComponentsLookup.GameLoopStateEnum;
        var component = (Game.GameLoopStateEnumComponent)CreateComponent(index, typeof(Game.GameLoopStateEnumComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveGameLoopStateEnum() {
        RemoveComponent(GameComponentsLookup.GameLoopStateEnum);
        return this;
    }
}
