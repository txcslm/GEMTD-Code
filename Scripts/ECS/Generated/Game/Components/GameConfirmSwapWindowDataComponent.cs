//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherConfirmSwapWindowData;

    public static Entitas.IMatcher<GameEntity> ConfirmSwapWindowData {
        get {
            if (_matcherConfirmSwapWindowData == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ConfirmSwapWindowData);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherConfirmSwapWindowData = matcher;
            }

            return _matcherConfirmSwapWindowData;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity confirmSwapWindowDataEntity { get { return GetGroup(GameMatcher.ConfirmSwapWindowData).GetSingleEntity(); } }
    public Game.PlayerAbility.SwapAbility.Comps.Game.PlayerAbility.SwapAbility.Comps.ConfirmSwapWindowDataComponent confirmSwapWindowData { get { return confirmSwapWindowDataEntity.confirmSwapWindowData; } }
    public Game.PlayerAbility.SwapAbility.Comps.Game.PlayerAbility.SwapAbility.Comps.SwapPair ConfirmSwapWindowData { get { return confirmSwapWindowData.Value; } }
    public bool hasConfirmSwapWindowData { get { return confirmSwapWindowDataEntity != null; } }

    public GameEntity SetConfirmSwapWindowData(Game.PlayerAbility.SwapAbility.Comps.Game.PlayerAbility.SwapAbility.Comps.SwapPair newValue) {
        if (hasConfirmSwapWindowData) {
            throw new Entitas.EntitasException("Could not set ConfirmSwapWindowData!\n" + this + " already has an entity with Game.PlayerAbility.SwapAbility.Comps.Game.PlayerAbility.SwapAbility.Comps.ConfirmSwapWindowDataComponent!",
                "You should check if the context already has a confirmSwapWindowDataEntity before setting it or use context.ReplaceConfirmSwapWindowData().");
        }
        var entity = CreateEntity();
        entity.AddConfirmSwapWindowData(newValue);
        return entity;
    }

    public void ReplaceConfirmSwapWindowData(Game.PlayerAbility.SwapAbility.Comps.Game.PlayerAbility.SwapAbility.Comps.SwapPair newValue) {
        var entity = confirmSwapWindowDataEntity;
        if (entity == null) {
            entity = SetConfirmSwapWindowData(newValue);
        } else {
            entity.ReplaceConfirmSwapWindowData(newValue);
        }
    }

    public void RemoveConfirmSwapWindowData() {
        confirmSwapWindowDataEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.PlayerAbility.SwapAbility.Comps.Game.PlayerAbility.SwapAbility.Comps.ConfirmSwapWindowDataComponent confirmSwapWindowData { get { return (Game.PlayerAbility.SwapAbility.Comps.Game.PlayerAbility.SwapAbility.Comps.ConfirmSwapWindowDataComponent)GetComponent(GameComponentsLookup.ConfirmSwapWindowData); } }
    public Game.PlayerAbility.SwapAbility.Comps.Game.PlayerAbility.SwapAbility.Comps.SwapPair ConfirmSwapWindowData { get { return confirmSwapWindowData.Value; } }
    public bool hasConfirmSwapWindowData { get { return HasComponent(GameComponentsLookup.ConfirmSwapWindowData); } }

    public GameEntity AddConfirmSwapWindowData(Game.PlayerAbility.SwapAbility.Comps.Game.PlayerAbility.SwapAbility.Comps.SwapPair newValue) {
        var index = GameComponentsLookup.ConfirmSwapWindowData;
        var component = (Game.PlayerAbility.SwapAbility.Comps.Game.PlayerAbility.SwapAbility.Comps.ConfirmSwapWindowDataComponent)CreateComponent(index, typeof(Game.PlayerAbility.SwapAbility.Comps.Game.PlayerAbility.SwapAbility.Comps.ConfirmSwapWindowDataComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceConfirmSwapWindowData(Game.PlayerAbility.SwapAbility.Comps.Game.PlayerAbility.SwapAbility.Comps.SwapPair newValue) {
        var index = GameComponentsLookup.ConfirmSwapWindowData;
        var component = (Game.PlayerAbility.SwapAbility.Comps.Game.PlayerAbility.SwapAbility.Comps.ConfirmSwapWindowDataComponent)CreateComponent(index, typeof(Game.PlayerAbility.SwapAbility.Comps.Game.PlayerAbility.SwapAbility.Comps.ConfirmSwapWindowDataComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveConfirmSwapWindowData() {
        RemoveComponent(GameComponentsLookup.ConfirmSwapWindowData);
        return this;
    }
}
