//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherZoomState;

    public static Entitas.IMatcher<GameEntity> ZoomState {
        get {
            if (_matcherZoomState == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ZoomState);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherZoomState = matcher;
            }

            return _matcherZoomState;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Cameras.ZoomStateComponent zoomState { get { return (Game.Cameras.ZoomStateComponent)GetComponent(GameComponentsLookup.ZoomState); } }
    public float ZoomState { get { return zoomState.Value; } }
    public bool hasZoomState { get { return HasComponent(GameComponentsLookup.ZoomState); } }

    public GameEntity AddZoomState(float newValue) {
        var index = GameComponentsLookup.ZoomState;
        var component = (Game.Cameras.ZoomStateComponent)CreateComponent(index, typeof(Game.Cameras.ZoomStateComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceZoomState(float newValue) {
        var index = GameComponentsLookup.ZoomState;
        var component = (Game.Cameras.ZoomStateComponent)CreateComponent(index, typeof(Game.Cameras.ZoomStateComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveZoomState() {
        RemoveComponent(GameComponentsLookup.ZoomState);
        return this;
    }
}
