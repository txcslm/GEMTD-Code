//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCameraInput;

    public static Entitas.IMatcher<GameEntity> CameraInput {
        get {
            if (_matcherCameraInput == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CameraInput);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCameraInput = matcher;
            }

            return _matcherCameraInput;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Cameras.CameraInputComponent cameraInput { get { return (Game.Cameras.CameraInputComponent)GetComponent(GameComponentsLookup.CameraInput); } }
    public Game.Cameras.CameraInputData CameraInput { get { return cameraInput.Value; } }
    public bool hasCameraInput { get { return HasComponent(GameComponentsLookup.CameraInput); } }

    public GameEntity AddCameraInput(Game.Cameras.CameraInputData newValue) {
        var index = GameComponentsLookup.CameraInput;
        var component = (Game.Cameras.CameraInputComponent)CreateComponent(index, typeof(Game.Cameras.CameraInputComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCameraInput(Game.Cameras.CameraInputData newValue) {
        var index = GameComponentsLookup.CameraInput;
        var component = (Game.Cameras.CameraInputComponent)CreateComponent(index, typeof(Game.Cameras.CameraInputComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCameraInput() {
        RemoveComponent(GameComponentsLookup.CameraInput);
        return this;
    }
}
