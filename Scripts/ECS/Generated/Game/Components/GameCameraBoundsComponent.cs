//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCameraBounds;

    public static Entitas.IMatcher<GameEntity> CameraBounds {
        get {
            if (_matcherCameraBounds == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CameraBounds);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCameraBounds = matcher;
            }

            return _matcherCameraBounds;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Cameras.CameraBounds cameraBounds { get { return (Game.Cameras.CameraBounds)GetComponent(GameComponentsLookup.CameraBounds); } }
    public Game.Cameras.CameraBoundsData CameraBounds { get { return cameraBounds.Value; } }
    public bool hasCameraBounds { get { return HasComponent(GameComponentsLookup.CameraBounds); } }

    public GameEntity AddCameraBounds(Game.Cameras.CameraBoundsData newValue) {
        var index = GameComponentsLookup.CameraBounds;
        var component = (Game.Cameras.CameraBounds)CreateComponent(index, typeof(Game.Cameras.CameraBounds));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCameraBounds(Game.Cameras.CameraBoundsData newValue) {
        var index = GameComponentsLookup.CameraBounds;
        var component = (Game.Cameras.CameraBounds)CreateComponent(index, typeof(Game.Cameras.CameraBounds));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCameraBounds() {
        RemoveComponent(GameComponentsLookup.CameraBounds);
        return this;
    }
}
