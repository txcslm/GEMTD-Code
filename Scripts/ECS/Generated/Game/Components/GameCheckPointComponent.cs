//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCheckPoint;

    public static Entitas.IMatcher<GameEntity> CheckPoint {
        get {
            if (_matcherCheckPoint == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CheckPoint);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCheckPoint = matcher;
            }

            return _matcherCheckPoint;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Maze.CheckPointComponent checkPoint { get { return (Game.Maze.CheckPointComponent)GetComponent(GameComponentsLookup.CheckPoint); } }
    public int CheckPoint { get { return checkPoint.Value; } }
    public bool hasCheckPoint { get { return HasComponent(GameComponentsLookup.CheckPoint); } }

    public GameEntity AddCheckPoint(int newValue) {
        var index = GameComponentsLookup.CheckPoint;
        var component = (Game.Maze.CheckPointComponent)CreateComponent(index, typeof(Game.Maze.CheckPointComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCheckPoint(int newValue) {
        var index = GameComponentsLookup.CheckPoint;
        var component = (Game.Maze.CheckPointComponent)CreateComponent(index, typeof(Game.Maze.CheckPointComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCheckPoint() {
        RemoveComponent(GameComponentsLookup.CheckPoint);
        return this;
    }
}
