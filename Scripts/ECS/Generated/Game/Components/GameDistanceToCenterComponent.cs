//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherDistanceToCenter;

    public static Entitas.IMatcher<GameEntity> DistanceToCenter {
        get {
            if (_matcherDistanceToCenter == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.DistanceToCenter);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherDistanceToCenter = matcher;
            }

            return _matcherDistanceToCenter;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Maze.DistanceToCenterComponent distanceToCenter { get { return (Game.Maze.DistanceToCenterComponent)GetComponent(GameComponentsLookup.DistanceToCenter); } }
    public float DistanceToCenter { get { return distanceToCenter.Value; } }
    public bool hasDistanceToCenter { get { return HasComponent(GameComponentsLookup.DistanceToCenter); } }

    public GameEntity AddDistanceToCenter(float newValue) {
        var index = GameComponentsLookup.DistanceToCenter;
        var component = (Game.Maze.DistanceToCenterComponent)CreateComponent(index, typeof(Game.Maze.DistanceToCenterComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceDistanceToCenter(float newValue) {
        var index = GameComponentsLookup.DistanceToCenter;
        var component = (Game.Maze.DistanceToCenterComponent)CreateComponent(index, typeof(Game.Maze.DistanceToCenterComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveDistanceToCenter() {
        RemoveComponent(GameComponentsLookup.DistanceToCenter);
        return this;
    }
}
