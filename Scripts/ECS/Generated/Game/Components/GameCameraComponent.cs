//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCamera;

    public static Entitas.IMatcher<GameEntity> Camera {
        get {
            if (_matcherCamera == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Camera);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCamera = matcher;
            }

            return _matcherCamera;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity cameraEntity { get { return GetGroup(GameMatcher.Camera).GetSingleEntity(); } }
    public Game.Cameras.CameraComponent camera { get { return cameraEntity.camera; } }
    public UnityEngine.Camera Camera { get { return camera.Value; } }
    public bool hasCamera { get { return cameraEntity != null; } }

    public GameEntity SetCamera(UnityEngine.Camera newValue) {
        if (hasCamera) {
            throw new Entitas.EntitasException("Could not set Camera!\n" + this + " already has an entity with Game.Cameras.CameraComponent!",
                "You should check if the context already has a cameraEntity before setting it or use context.ReplaceCamera().");
        }
        var entity = CreateEntity();
        entity.AddCamera(newValue);
        return entity;
    }

    public void ReplaceCamera(UnityEngine.Camera newValue) {
        var entity = cameraEntity;
        if (entity == null) {
            entity = SetCamera(newValue);
        } else {
            entity.ReplaceCamera(newValue);
        }
    }

    public void RemoveCamera() {
        cameraEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Cameras.CameraComponent camera { get { return (Game.Cameras.CameraComponent)GetComponent(GameComponentsLookup.Camera); } }
    public UnityEngine.Camera Camera { get { return camera.Value; } }
    public bool hasCamera { get { return HasComponent(GameComponentsLookup.Camera); } }

    public GameEntity AddCamera(UnityEngine.Camera newValue) {
        var index = GameComponentsLookup.Camera;
        var component = (Game.Cameras.CameraComponent)CreateComponent(index, typeof(Game.Cameras.CameraComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCamera(UnityEngine.Camera newValue) {
        var index = GameComponentsLookup.Camera;
        var component = (Game.Cameras.CameraComponent)CreateComponent(index, typeof(Game.Cameras.CameraComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCamera() {
        RemoveComponent(GameComponentsLookup.Camera);
        return this;
    }
}
