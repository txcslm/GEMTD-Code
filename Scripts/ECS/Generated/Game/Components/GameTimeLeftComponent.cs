//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTimeLeft;

    public static Entitas.IMatcher<GameEntity> TimeLeft {
        get {
            if (_matcherTimeLeft == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TimeLeft);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTimeLeft = matcher;
            }

            return _matcherTimeLeft;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Battle.TimeLeftComponent timeLeft { get { return (Game.Battle.TimeLeftComponent)GetComponent(GameComponentsLookup.TimeLeft); } }
    public float TimeLeft { get { return timeLeft.Value; } }
    public bool hasTimeLeft { get { return HasComponent(GameComponentsLookup.TimeLeft); } }

    public GameEntity AddTimeLeft(float newValue) {
        var index = GameComponentsLookup.TimeLeft;
        var component = (Game.Battle.TimeLeftComponent)CreateComponent(index, typeof(Game.Battle.TimeLeftComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceTimeLeft(float newValue) {
        var index = GameComponentsLookup.TimeLeft;
        var component = (Game.Battle.TimeLeftComponent)CreateComponent(index, typeof(Game.Battle.TimeLeftComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveTimeLeft() {
        RemoveComponent(GameComponentsLookup.TimeLeft);
        return this;
    }
}
