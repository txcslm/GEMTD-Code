//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPeriod;

    public static Entitas.IMatcher<GameEntity> Period {
        get {
            if (_matcherPeriod == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Period);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPeriod = matcher;
            }

            return _matcherPeriod;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Battle.PeriodComponent period { get { return (Game.Battle.PeriodComponent)GetComponent(GameComponentsLookup.Period); } }
    public float Period { get { return period.Value; } }
    public bool hasPeriod { get { return HasComponent(GameComponentsLookup.Period); } }

    public GameEntity AddPeriod(float newValue) {
        var index = GameComponentsLookup.Period;
        var component = (Game.Battle.PeriodComponent)CreateComponent(index, typeof(Game.Battle.PeriodComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplacePeriod(float newValue) {
        var index = GameComponentsLookup.Period;
        var component = (Game.Battle.PeriodComponent)CreateComponent(index, typeof(Game.Battle.PeriodComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemovePeriod() {
        RemoveComponent(GameComponentsLookup.Period);
        return this;
    }
}
