//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMazePosition;

    public static Entitas.IMatcher<GameEntity> MazePosition {
        get {
            if (_matcherMazePosition == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MazePosition);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMazePosition = matcher;
            }

            return _matcherMazePosition;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Maze.MazePositionComponent mazePosition { get { return (Game.Maze.MazePositionComponent)GetComponent(GameComponentsLookup.MazePosition); } }
    public UnityEngine.Vector2Int MazePosition { get { return mazePosition.Value; } }
    public bool hasMazePosition { get { return HasComponent(GameComponentsLookup.MazePosition); } }

    public GameEntity AddMazePosition(UnityEngine.Vector2Int newValue) {
        var index = GameComponentsLookup.MazePosition;
        var component = (Game.Maze.MazePositionComponent)CreateComponent(index, typeof(Game.Maze.MazePositionComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceMazePosition(UnityEngine.Vector2Int newValue) {
        var index = GameComponentsLookup.MazePosition;
        var component = (Game.Maze.MazePositionComponent)CreateComponent(index, typeof(Game.Maze.MazePositionComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveMazePosition() {
        RemoveComponent(GameComponentsLookup.MazePosition);
        return this;
    }
}
