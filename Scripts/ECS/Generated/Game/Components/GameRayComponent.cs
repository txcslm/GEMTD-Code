//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRay;

    public static Entitas.IMatcher<GameEntity> Ray {
        get {
            if (_matcherRay == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Ray);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRay = matcher;
            }

            return _matcherRay;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Cameras.RayComponent ray { get { return (Game.Cameras.RayComponent)GetComponent(GameComponentsLookup.Ray); } }
    public UnityEngine.Ray Ray { get { return ray.Value; } }
    public bool hasRay { get { return HasComponent(GameComponentsLookup.Ray); } }

    public GameEntity AddRay(UnityEngine.Ray newValue) {
        var index = GameComponentsLookup.Ray;
        var component = (Game.Cameras.RayComponent)CreateComponent(index, typeof(Game.Cameras.RayComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceRay(UnityEngine.Ray newValue) {
        var index = GameComponentsLookup.Ray;
        var component = (Game.Cameras.RayComponent)CreateComponent(index, typeof(Game.Cameras.RayComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveRay() {
        RemoveComponent(GameComponentsLookup.Ray);
        return this;
    }
}
