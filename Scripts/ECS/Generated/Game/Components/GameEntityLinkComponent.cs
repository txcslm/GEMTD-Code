//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherEntityLink;

    public static Entitas.IMatcher<GameEntity> EntityLink {
        get {
            if (_matcherEntityLink == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.EntityLink);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherEntityLink = matcher;
            }

            return _matcherEntityLink;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.CommonComponents.EntityLinkComponent entityLink { get { return (Game.CommonComponents.EntityLinkComponent)GetComponent(GameComponentsLookup.EntityLink); } }
    public int EntityLink { get { return entityLink.Value; } }
    public bool hasEntityLink { get { return HasComponent(GameComponentsLookup.EntityLink); } }

    public GameEntity AddEntityLink(int newValue) {
        var index = GameComponentsLookup.EntityLink;
        var component = (Game.CommonComponents.EntityLinkComponent)CreateComponent(index, typeof(Game.CommonComponents.EntityLinkComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceEntityLink(int newValue) {
        var index = GameComponentsLookup.EntityLink;
        var component = (Game.CommonComponents.EntityLinkComponent)CreateComponent(index, typeof(Game.CommonComponents.EntityLinkComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveEntityLink() {
        RemoveComponent(GameComponentsLookup.EntityLink);
        return this;
    }
}
