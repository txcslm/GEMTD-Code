//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherArmor;

    public static Entitas.IMatcher<GameEntity> Armor {
        get {
            if (_matcherArmor == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Armor);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherArmor = matcher;
            }

            return _matcherArmor;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Lifetime.ArmorComponent armor { get { return (Game.Lifetime.ArmorComponent)GetComponent(GameComponentsLookup.Armor); } }
    public float Armor { get { return armor.Value; } }
    public bool hasArmor { get { return HasComponent(GameComponentsLookup.Armor); } }

    public GameEntity AddArmor(float newValue) {
        var index = GameComponentsLookup.Armor;
        var component = (Game.Lifetime.ArmorComponent)CreateComponent(index, typeof(Game.Lifetime.ArmorComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceArmor(float newValue) {
        var index = GameComponentsLookup.Armor;
        var component = (Game.Lifetime.ArmorComponent)CreateComponent(index, typeof(Game.Lifetime.ArmorComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveArmor() {
        RemoveComponent(GameComponentsLookup.Armor);
        return this;
    }
}
