//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCurrentHealthPointsListener;

    public static Entitas.IMatcher<GameEntity> CurrentHealthPointsListener {
        get {
            if (_matcherCurrentHealthPointsListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CurrentHealthPointsListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCurrentHealthPointsListener = matcher;
            }

            return _matcherCurrentHealthPointsListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddCurrentHealthPointsListener(ICurrentHealthPointsListener value) {
        var listeners = hasCurrentHealthPointsListener
            ? currentHealthPointsListener.value
            : new System.Collections.Generic.List<ICurrentHealthPointsListener>();
        listeners.Add(value);
        ReplaceCurrentHealthPointsListener(listeners);
    }

    public void RemoveCurrentHealthPointsListener(ICurrentHealthPointsListener value, bool removeComponentWhenEmpty = true) {
        var listeners = currentHealthPointsListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveCurrentHealthPointsListener();
        } else {
            ReplaceCurrentHealthPointsListener(listeners);
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public CurrentHealthPointsListenerComponent currentHealthPointsListener { get { return (CurrentHealthPointsListenerComponent)GetComponent(GameComponentsLookup.CurrentHealthPointsListener); } }
    public bool hasCurrentHealthPointsListener { get { return HasComponent(GameComponentsLookup.CurrentHealthPointsListener); } }

    public GameEntity AddCurrentHealthPointsListener(System.Collections.Generic.List<ICurrentHealthPointsListener> newValue) {
        var index = GameComponentsLookup.CurrentHealthPointsListener;
        var component = (CurrentHealthPointsListenerComponent)CreateComponent(index, typeof(CurrentHealthPointsListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCurrentHealthPointsListener(System.Collections.Generic.List<ICurrentHealthPointsListener> newValue) {
        var index = GameComponentsLookup.CurrentHealthPointsListener;
        var component = (CurrentHealthPointsListenerComponent)CreateComponent(index, typeof(CurrentHealthPointsListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCurrentHealthPointsListener() {
        RemoveComponent(GameComponentsLookup.CurrentHealthPointsListener);
        return this;
    }
}
