//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPrefab;

    public static Entitas.IMatcher<GameEntity> Prefab {
        get {
            if (_matcherPrefab == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Prefab);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPrefab = matcher;
            }

            return _matcherPrefab;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.CommonComponents.PrefabComponent prefab { get { return (Game.CommonComponents.PrefabComponent)GetComponent(GameComponentsLookup.Prefab); } }
    public Game.GameEntityView Prefab { get { return prefab.Value; } }
    public bool hasPrefab { get { return HasComponent(GameComponentsLookup.Prefab); } }

    public GameEntity AddPrefab(Game.GameEntityView newValue) {
        var index = GameComponentsLookup.Prefab;
        var component = (Game.CommonComponents.PrefabComponent)CreateComponent(index, typeof(Game.CommonComponents.PrefabComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplacePrefab(Game.GameEntityView newValue) {
        var index = GameComponentsLookup.Prefab;
        var component = (Game.CommonComponents.PrefabComponent)CreateComponent(index, typeof(Game.CommonComponents.PrefabComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemovePrefab() {
        RemoveComponent(GameComponentsLookup.Prefab);
        return this;
    }
}
