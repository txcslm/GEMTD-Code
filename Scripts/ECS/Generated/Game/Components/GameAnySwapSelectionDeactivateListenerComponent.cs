//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAnySwapSelectionDeactivateListener;

    public static Entitas.IMatcher<GameEntity> AnySwapSelectionDeactivateListener {
        get {
            if (_matcherAnySwapSelectionDeactivateListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AnySwapSelectionDeactivateListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAnySwapSelectionDeactivateListener = matcher;
            }

            return _matcherAnySwapSelectionDeactivateListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddAnySwapSelectionDeactivateListener(IAnySwapSelectionDeactivateListener value) {
        var listeners = hasAnySwapSelectionDeactivateListener
            ? anySwapSelectionDeactivateListener.value
            : new System.Collections.Generic.List<IAnySwapSelectionDeactivateListener>();
        listeners.Add(value);
        ReplaceAnySwapSelectionDeactivateListener(listeners);
    }

    public void RemoveAnySwapSelectionDeactivateListener(IAnySwapSelectionDeactivateListener value, bool removeComponentWhenEmpty = true) {
        var listeners = anySwapSelectionDeactivateListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveAnySwapSelectionDeactivateListener();
        } else {
            ReplaceAnySwapSelectionDeactivateListener(listeners);
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public AnySwapSelectionDeactivateListenerComponent anySwapSelectionDeactivateListener { get { return (AnySwapSelectionDeactivateListenerComponent)GetComponent(GameComponentsLookup.AnySwapSelectionDeactivateListener); } }
    public bool hasAnySwapSelectionDeactivateListener { get { return HasComponent(GameComponentsLookup.AnySwapSelectionDeactivateListener); } }

    public GameEntity AddAnySwapSelectionDeactivateListener(System.Collections.Generic.List<IAnySwapSelectionDeactivateListener> newValue) {
        var index = GameComponentsLookup.AnySwapSelectionDeactivateListener;
        var component = (AnySwapSelectionDeactivateListenerComponent)CreateComponent(index, typeof(AnySwapSelectionDeactivateListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAnySwapSelectionDeactivateListener(System.Collections.Generic.List<IAnySwapSelectionDeactivateListener> newValue) {
        var index = GameComponentsLookup.AnySwapSelectionDeactivateListener;
        var component = (AnySwapSelectionDeactivateListenerComponent)CreateComponent(index, typeof(AnySwapSelectionDeactivateListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAnySwapSelectionDeactivateListener() {
        RemoveComponent(GameComponentsLookup.AnySwapSelectionDeactivateListener);
        return this;
    }
}
