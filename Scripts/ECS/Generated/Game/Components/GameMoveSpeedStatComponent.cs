//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMoveSpeedStat;

    public static Entitas.IMatcher<GameEntity> MoveSpeedStat {
        get {
            if (_matcherMoveSpeedStat == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MoveSpeedStat);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMoveSpeedStat = matcher;
            }

            return _matcherMoveSpeedStat;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Battle.MoveSpeedStatComponent moveSpeedStat { get { return (Game.Battle.MoveSpeedStatComponent)GetComponent(GameComponentsLookup.MoveSpeedStat); } }
    public float MoveSpeedStat { get { return moveSpeedStat.Value; } }
    public bool hasMoveSpeedStat { get { return HasComponent(GameComponentsLookup.MoveSpeedStat); } }

    public GameEntity AddMoveSpeedStat(float newValue) {
        var index = GameComponentsLookup.MoveSpeedStat;
        var component = (Game.Battle.MoveSpeedStatComponent)CreateComponent(index, typeof(Game.Battle.MoveSpeedStatComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceMoveSpeedStat(float newValue) {
        var index = GameComponentsLookup.MoveSpeedStat;
        var component = (Game.Battle.MoveSpeedStatComponent)CreateComponent(index, typeof(Game.Battle.MoveSpeedStatComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveMoveSpeedStat() {
        RemoveComponent(GameComponentsLookup.MoveSpeedStat);
        return this;
    }
}
