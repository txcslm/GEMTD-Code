//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherEnemiesPerRound;

    public static Entitas.IMatcher<GameEntity> EnemiesPerRound {
        get {
            if (_matcherEnemiesPerRound == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.EnemiesPerRound);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherEnemiesPerRound = matcher;
            }

            return _matcherEnemiesPerRound;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.KillEnemy.EnemiesPerRoundComponent enemiesPerRound { get { return (Game.KillEnemy.EnemiesPerRoundComponent)GetComponent(GameComponentsLookup.EnemiesPerRound); } }
    public int EnemiesPerRound { get { return enemiesPerRound.Value; } }
    public bool hasEnemiesPerRound { get { return HasComponent(GameComponentsLookup.EnemiesPerRound); } }

    public GameEntity AddEnemiesPerRound(int newValue) {
        var index = GameComponentsLookup.EnemiesPerRound;
        var component = (Game.KillEnemy.EnemiesPerRoundComponent)CreateComponent(index, typeof(Game.KillEnemy.EnemiesPerRoundComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceEnemiesPerRound(int newValue) {
        var index = GameComponentsLookup.EnemiesPerRound;
        var component = (Game.KillEnemy.EnemiesPerRoundComponent)CreateComponent(index, typeof(Game.KillEnemy.EnemiesPerRoundComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveEnemiesPerRound() {
        RemoveComponent(GameComponentsLookup.EnemiesPerRound);
        return this;
    }
}
