//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAnySwapSelectionActiveListener;

    public static Entitas.IMatcher<GameEntity> AnySwapSelectionActiveListener {
        get {
            if (_matcherAnySwapSelectionActiveListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AnySwapSelectionActiveListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAnySwapSelectionActiveListener = matcher;
            }

            return _matcherAnySwapSelectionActiveListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddAnySwapSelectionActiveListener(IAnySwapSelectionActiveListener value) {
        var listeners = hasAnySwapSelectionActiveListener
            ? anySwapSelectionActiveListener.value
            : new System.Collections.Generic.List<IAnySwapSelectionActiveListener>();
        listeners.Add(value);
        ReplaceAnySwapSelectionActiveListener(listeners);
    }

    public void RemoveAnySwapSelectionActiveListener(IAnySwapSelectionActiveListener value, bool removeComponentWhenEmpty = true) {
        var listeners = anySwapSelectionActiveListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveAnySwapSelectionActiveListener();
        } else {
            ReplaceAnySwapSelectionActiveListener(listeners);
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public AnySwapSelectionActiveListenerComponent anySwapSelectionActiveListener { get { return (AnySwapSelectionActiveListenerComponent)GetComponent(GameComponentsLookup.AnySwapSelectionActiveListener); } }
    public bool hasAnySwapSelectionActiveListener { get { return HasComponent(GameComponentsLookup.AnySwapSelectionActiveListener); } }

    public GameEntity AddAnySwapSelectionActiveListener(System.Collections.Generic.List<IAnySwapSelectionActiveListener> newValue) {
        var index = GameComponentsLookup.AnySwapSelectionActiveListener;
        var component = (AnySwapSelectionActiveListenerComponent)CreateComponent(index, typeof(AnySwapSelectionActiveListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAnySwapSelectionActiveListener(System.Collections.Generic.List<IAnySwapSelectionActiveListener> newValue) {
        var index = GameComponentsLookup.AnySwapSelectionActiveListener;
        var component = (AnySwapSelectionActiveListenerComponent)CreateComponent(index, typeof(AnySwapSelectionActiveListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAnySwapSelectionActiveListener() {
        RemoveComponent(GameComponentsLookup.AnySwapSelectionActiveListener);
        return this;
    }
}
