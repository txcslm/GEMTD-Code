//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherSplitShotTargets;

    public static Entitas.IMatcher<GameEntity> SplitShotTargets {
        get {
            if (_matcherSplitShotTargets == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.SplitShotTargets);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherSplitShotTargets = matcher;
            }

            return _matcherSplitShotTargets;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Battle.SplitShot.SplitShotTargetsComponent splitShotTargets { get { return (Game.Battle.SplitShot.SplitShotTargetsComponent)GetComponent(GameComponentsLookup.SplitShotTargets); } }
    public Game.Battle.SplitShot.Data.TargetDistanceData?[] SplitShotTargets { get { return splitShotTargets.Value; } }
    public bool hasSplitShotTargets { get { return HasComponent(GameComponentsLookup.SplitShotTargets); } }

    public GameEntity AddSplitShotTargets(Game.Battle.SplitShot.Data.TargetDistanceData?[] newValue) {
        var index = GameComponentsLookup.SplitShotTargets;
        var component = (Game.Battle.SplitShot.SplitShotTargetsComponent)CreateComponent(index, typeof(Game.Battle.SplitShot.SplitShotTargetsComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceSplitShotTargets(Game.Battle.SplitShot.Data.TargetDistanceData?[] newValue) {
        var index = GameComponentsLookup.SplitShotTargets;
        var component = (Game.Battle.SplitShot.SplitShotTargetsComponent)CreateComponent(index, typeof(Game.Battle.SplitShot.SplitShotTargetsComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveSplitShotTargets() {
        RemoveComponent(GameComponentsLookup.SplitShotTargets);
        return this;
    }
}
