//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRoundTimerListener;

    public static Entitas.IMatcher<GameEntity> RoundTimerListener {
        get {
            if (_matcherRoundTimerListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.RoundTimerListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRoundTimerListener = matcher;
            }

            return _matcherRoundTimerListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddRoundTimerListener(IRoundTimerListener value) {
        var listeners = hasRoundTimerListener
            ? roundTimerListener.value
            : new System.Collections.Generic.List<IRoundTimerListener>();
        listeners.Add(value);
        ReplaceRoundTimerListener(listeners);
    }

    public void RemoveRoundTimerListener(IRoundTimerListener value, bool removeComponentWhenEmpty = true) {
        var listeners = roundTimerListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveRoundTimerListener();
        } else {
            ReplaceRoundTimerListener(listeners);
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public RoundTimerListenerComponent roundTimerListener { get { return (RoundTimerListenerComponent)GetComponent(GameComponentsLookup.RoundTimerListener); } }
    public bool hasRoundTimerListener { get { return HasComponent(GameComponentsLookup.RoundTimerListener); } }

    public GameEntity AddRoundTimerListener(System.Collections.Generic.List<IRoundTimerListener> newValue) {
        var index = GameComponentsLookup.RoundTimerListener;
        var component = (RoundTimerListenerComponent)CreateComponent(index, typeof(RoundTimerListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceRoundTimerListener(System.Collections.Generic.List<IRoundTimerListener> newValue) {
        var index = GameComponentsLookup.RoundTimerListener;
        var component = (RoundTimerListenerComponent)CreateComponent(index, typeof(RoundTimerListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveRoundTimerListener() {
        RemoveComponent(GameComponentsLookup.RoundTimerListener);
        return this;
    }
}
