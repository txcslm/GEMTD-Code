//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherSwapSecondTowerSelected;

    public static Entitas.IMatcher<GameEntity> SwapSecondTowerSelected {
        get {
            if (_matcherSwapSecondTowerSelected == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.SwapSecondTowerSelected);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherSwapSecondTowerSelected = matcher;
            }

            return _matcherSwapSecondTowerSelected;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.PlayerAbility.SwapAbility.Comps.SwapSecondTowerSelected swapSecondTowerSelected { get { return (Game.PlayerAbility.SwapAbility.Comps.SwapSecondTowerSelected)GetComponent(GameComponentsLookup.SwapSecondTowerSelected); } }
    public int SwapSecondTowerSelected { get { return swapSecondTowerSelected.Value; } }
    public bool hasSwapSecondTowerSelected { get { return HasComponent(GameComponentsLookup.SwapSecondTowerSelected); } }

    public GameEntity AddSwapSecondTowerSelected(int newValue) {
        var index = GameComponentsLookup.SwapSecondTowerSelected;
        var component = (Game.PlayerAbility.SwapAbility.Comps.SwapSecondTowerSelected)CreateComponent(index, typeof(Game.PlayerAbility.SwapAbility.Comps.SwapSecondTowerSelected));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceSwapSecondTowerSelected(int newValue) {
        var index = GameComponentsLookup.SwapSecondTowerSelected;
        var component = (Game.PlayerAbility.SwapAbility.Comps.SwapSecondTowerSelected)CreateComponent(index, typeof(Game.PlayerAbility.SwapAbility.Comps.SwapSecondTowerSelected));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveSwapSecondTowerSelected() {
        RemoveComponent(GameComponentsLookup.SwapSecondTowerSelected);
        return this;
    }
}
