//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAnyAbilityUsingFinishedEventListener;

    public static Entitas.IMatcher<GameEntity> AnyAbilityUsingFinishedEventListener {
        get {
            if (_matcherAnyAbilityUsingFinishedEventListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AnyAbilityUsingFinishedEventListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAnyAbilityUsingFinishedEventListener = matcher;
            }

            return _matcherAnyAbilityUsingFinishedEventListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddAnyAbilityUsingFinishedEventListener(IAnyAbilityUsingFinishedEventListener value) {
        var listeners = hasAnyAbilityUsingFinishedEventListener
            ? anyAbilityUsingFinishedEventListener.value
            : new System.Collections.Generic.List<IAnyAbilityUsingFinishedEventListener>();
        listeners.Add(value);
        ReplaceAnyAbilityUsingFinishedEventListener(listeners);
    }

    public void RemoveAnyAbilityUsingFinishedEventListener(IAnyAbilityUsingFinishedEventListener value, bool removeComponentWhenEmpty = true) {
        var listeners = anyAbilityUsingFinishedEventListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveAnyAbilityUsingFinishedEventListener();
        } else {
            ReplaceAnyAbilityUsingFinishedEventListener(listeners);
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public AnyAbilityUsingFinishedEventListenerComponent anyAbilityUsingFinishedEventListener { get { return (AnyAbilityUsingFinishedEventListenerComponent)GetComponent(GameComponentsLookup.AnyAbilityUsingFinishedEventListener); } }
    public bool hasAnyAbilityUsingFinishedEventListener { get { return HasComponent(GameComponentsLookup.AnyAbilityUsingFinishedEventListener); } }

    public GameEntity AddAnyAbilityUsingFinishedEventListener(System.Collections.Generic.List<IAnyAbilityUsingFinishedEventListener> newValue) {
        var index = GameComponentsLookup.AnyAbilityUsingFinishedEventListener;
        var component = (AnyAbilityUsingFinishedEventListenerComponent)CreateComponent(index, typeof(AnyAbilityUsingFinishedEventListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAnyAbilityUsingFinishedEventListener(System.Collections.Generic.List<IAnyAbilityUsingFinishedEventListener> newValue) {
        var index = GameComponentsLookup.AnyAbilityUsingFinishedEventListener;
        var component = (AnyAbilityUsingFinishedEventListenerComponent)CreateComponent(index, typeof(AnyAbilityUsingFinishedEventListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAnyAbilityUsingFinishedEventListener() {
        RemoveComponent(GameComponentsLookup.AnyAbilityUsingFinishedEventListener);
        return this;
    }
}
