//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherProcessingDeathRemovedListener;

    public static Entitas.IMatcher<GameEntity> ProcessingDeathRemovedListener {
        get {
            if (_matcherProcessingDeathRemovedListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ProcessingDeathRemovedListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherProcessingDeathRemovedListener = matcher;
            }

            return _matcherProcessingDeathRemovedListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddProcessingDeathRemovedListener(IProcessingDeathRemovedListener value) {
        var listeners = hasProcessingDeathRemovedListener
            ? processingDeathRemovedListener.value
            : new System.Collections.Generic.List<IProcessingDeathRemovedListener>();
        listeners.Add(value);
        ReplaceProcessingDeathRemovedListener(listeners);
    }

    public void RemoveProcessingDeathRemovedListener(IProcessingDeathRemovedListener value, bool removeComponentWhenEmpty = true) {
        var listeners = processingDeathRemovedListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveProcessingDeathRemovedListener();
        } else {
            ReplaceProcessingDeathRemovedListener(listeners);
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public ProcessingDeathRemovedListenerComponent processingDeathRemovedListener { get { return (ProcessingDeathRemovedListenerComponent)GetComponent(GameComponentsLookup.ProcessingDeathRemovedListener); } }
    public bool hasProcessingDeathRemovedListener { get { return HasComponent(GameComponentsLookup.ProcessingDeathRemovedListener); } }

    public GameEntity AddProcessingDeathRemovedListener(System.Collections.Generic.List<IProcessingDeathRemovedListener> newValue) {
        var index = GameComponentsLookup.ProcessingDeathRemovedListener;
        var component = (ProcessingDeathRemovedListenerComponent)CreateComponent(index, typeof(ProcessingDeathRemovedListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceProcessingDeathRemovedListener(System.Collections.Generic.List<IProcessingDeathRemovedListener> newValue) {
        var index = GameComponentsLookup.ProcessingDeathRemovedListener;
        var component = (ProcessingDeathRemovedListenerComponent)CreateComponent(index, typeof(ProcessingDeathRemovedListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveProcessingDeathRemovedListener() {
        RemoveComponent(GameComponentsLookup.ProcessingDeathRemovedListener);
        return this;
    }
}
