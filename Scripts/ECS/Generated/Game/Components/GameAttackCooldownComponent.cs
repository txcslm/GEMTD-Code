//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAttackCooldown;

    public static Entitas.IMatcher<GameEntity> AttackCooldown {
        get {
            if (_matcherAttackCooldown == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AttackCooldown);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAttackCooldown = matcher;
            }

            return _matcherAttackCooldown;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Towers.AttackCooldownComponent attackCooldown { get { return (Game.Towers.AttackCooldownComponent)GetComponent(GameComponentsLookup.AttackCooldown); } }
    public float AttackCooldown { get { return attackCooldown.Value; } }
    public bool hasAttackCooldown { get { return HasComponent(GameComponentsLookup.AttackCooldown); } }

    public GameEntity AddAttackCooldown(float newValue) {
        var index = GameComponentsLookup.AttackCooldown;
        var component = (Game.Towers.AttackCooldownComponent)CreateComponent(index, typeof(Game.Towers.AttackCooldownComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAttackCooldown(float newValue) {
        var index = GameComponentsLookup.AttackCooldown;
        var component = (Game.Towers.AttackCooldownComponent)CreateComponent(index, typeof(Game.Towers.AttackCooldownComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAttackCooldown() {
        RemoveComponent(GameComponentsLookup.AttackCooldown);
        return this;
    }
}
